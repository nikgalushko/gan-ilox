program -> declaration* EOF
declaration -> classDeclaration | varDeclaration | functionDelcaration | statement;
classDeclaration -> "class" IDENTIFIER "{" function* "}";
varDeclaration -> "var" IDENTIFIER ("=" expression)? ";";
functionDelcaration -> "fun" function;
function -> IDENTIFIER "(" (IDENTIFIER)? ("," IDENTIFIER)* ")" block;
statement -> returnStatement | expressionStatement | ifStatement | printStatement | forStatement | block;
returnStatement -> "return" expression? ";";
expressionStatement -> expression ";";
ifStatement -> "if" "(" expression ")" block ("else" ifStatement | block)? ;
printStatement -> "print" expression ";";
forStatement -> "for" ("(" ((varDeclaration | expressionStatement) ";")? (expression | ";")? (expression)? ")")? block;
block -> "{" declaration* "}";
expression -> assignment;
assignment -> (call ".")? IDENTIFIER "=" assignment | equality;
logic_or -> logic_and ("or" logic_and)*;
logic_and -> equality ("and" equality)*;
equality -> comparison ( ("==" | "!=") comparison)*;
comparison -> term ( ("<" | "<=" | ">" | ">=") term )*;
term -> factor ( ("+" | "-" | "&" | "|") factor)*;
factor -> unary ( ("/" | "*" | "^") unary )*;
unary -> ("!" | "-" | "~") unary | call;
call -> primary ( "(" arguments? ")" | "." IDENTIFIER )*;
arguments -> expression ("," expression)*;
primary -> NUMBER | STRING | "true" | "false" | nil | "(" expression ")" | IDENTIFIER;
